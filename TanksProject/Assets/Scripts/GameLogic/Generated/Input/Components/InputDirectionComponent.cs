//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class InputContext {

    public InputEntity directionEntity { get { return GetGroup(InputMatcher.Direction).GetSingleEntity(); } }
    public Tanks.GameLogic.Components.Input.DirectionComponent direction { get { return directionEntity.direction; } }
    public bool hasDirection { get { return directionEntity != null; } }

    public InputEntity SetDirection(UnityEngine.Vector2 newValue) {
        if (hasDirection) {
            throw new Entitas.EntitasException("Could not set Direction!\n" + this + " already has an entity with Tanks.GameLogic.Components.Input.DirectionComponent!",
                "You should check if the context already has a directionEntity before setting it or use context.ReplaceDirection().");
        }
        var entity = CreateEntity();
        entity.AddDirection(newValue);
        return entity;
    }

    public void ReplaceDirection(UnityEngine.Vector2 newValue) {
        var entity = directionEntity;
        if (entity == null) {
            entity = SetDirection(newValue);
        } else {
            entity.ReplaceDirection(newValue);
        }
    }

    public void RemoveDirection() {
        directionEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class InputEntity {

    public Tanks.GameLogic.Components.Input.DirectionComponent direction { get { return (Tanks.GameLogic.Components.Input.DirectionComponent)GetComponent(InputComponentsLookup.Direction); } }
    public bool hasDirection { get { return HasComponent(InputComponentsLookup.Direction); } }

    public void AddDirection(UnityEngine.Vector2 newValue) {
        var index = InputComponentsLookup.Direction;
        var component = (Tanks.GameLogic.Components.Input.DirectionComponent)CreateComponent(index, typeof(Tanks.GameLogic.Components.Input.DirectionComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceDirection(UnityEngine.Vector2 newValue) {
        var index = InputComponentsLookup.Direction;
        var component = (Tanks.GameLogic.Components.Input.DirectionComponent)CreateComponent(index, typeof(Tanks.GameLogic.Components.Input.DirectionComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveDirection() {
        RemoveComponent(InputComponentsLookup.Direction);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class InputMatcher {

    static Entitas.IMatcher<InputEntity> _matcherDirection;

    public static Entitas.IMatcher<InputEntity> Direction {
        get {
            if (_matcherDirection == null) {
                var matcher = (Entitas.Matcher<InputEntity>)Entitas.Matcher<InputEntity>.AllOf(InputComponentsLookup.Direction);
                matcher.componentNames = InputComponentsLookup.componentNames;
                _matcherDirection = matcher;
            }

            return _matcherDirection;
        }
    }
}
