//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class AIEntity {

    static readonly Tanks.GameLogic.Components.AI.ReadyToShootComponent readyToShootComponent = new Tanks.GameLogic.Components.AI.ReadyToShootComponent();

    public bool isReadyToShoot {
        get { return HasComponent(AIComponentsLookup.ReadyToShoot); }
        set {
            if (value != isReadyToShoot) {
                var index = AIComponentsLookup.ReadyToShoot;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : readyToShootComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class AIMatcher {

    static Entitas.IMatcher<AIEntity> _matcherReadyToShoot;

    public static Entitas.IMatcher<AIEntity> ReadyToShoot {
        get {
            if (_matcherReadyToShoot == null) {
                var matcher = (Entitas.Matcher<AIEntity>)Entitas.Matcher<AIEntity>.AllOf(AIComponentsLookup.ReadyToShoot);
                matcher.componentNames = AIComponentsLookup.componentNames;
                _matcherReadyToShoot = matcher;
            }

            return _matcherReadyToShoot;
        }
    }
}
