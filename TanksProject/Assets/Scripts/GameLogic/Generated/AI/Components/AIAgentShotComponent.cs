//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class AIEntity {

    static readonly Tanks.GameLogic.Components.AI.AgentShotComponent agentShotComponent = new Tanks.GameLogic.Components.AI.AgentShotComponent();

    public bool isAgentShot {
        get { return HasComponent(AIComponentsLookup.AgentShot); }
        set {
            if (value != isAgentShot) {
                var index = AIComponentsLookup.AgentShot;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : agentShotComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class AIMatcher {

    static Entitas.IMatcher<AIEntity> _matcherAgentShot;

    public static Entitas.IMatcher<AIEntity> AgentShot {
        get {
            if (_matcherAgentShot == null) {
                var matcher = (Entitas.Matcher<AIEntity>)Entitas.Matcher<AIEntity>.AllOf(AIComponentsLookup.AgentShot);
                matcher.componentNames = AIComponentsLookup.componentNames;
                _matcherAgentShot = matcher;
            }

            return _matcherAgentShot;
        }
    }
}
