//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Core/Infrastructure/Services/Input/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace TanksGB.Core.Infrastructure.Services.Input
{
    public partial class @InputControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""Tank"",
            ""id"": ""2de790ef-8706-465c-a93b-2859ec759855"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""f2dd21e1-32c4-4947-b11e-345518905850"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""ba9800b2-e302-4b84-8faa-44fa9f6c91ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleNextTank"",
                    ""type"": ""Button"",
                    ""id"": ""f35cbae0-f6f7-4990-ae34-9f2db7f6ca72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TogglePreviousTank"",
                    ""type"": ""Button"",
                    ""id"": ""32a8ede4-6d4a-408b-9e89-573415e057f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aiminig"",
                    ""type"": ""Button"",
                    ""id"": ""1df2d674-e8f4-4536-af3f-dcec17b398a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""101ef23e-b312-4173-ae57-d1775a29625a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""6fcc5d18-8669-4324-bf75-d9a9e1741400"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""3fcb3231-4cc3-4d81-a26d-4963adfaca3b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""ef59a1b6-3cc1-4417-ac50-db7ab17d7586"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""eb0ebd73-4c9e-4947-8cc1-f4710f874e21"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""5bc3e953-e018-419f-b548-a21506343958"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4a68fc63-f2c5-4abd-9c9c-9963f72110f8"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleNextTank"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d8c57f3-d4f6-430a-9b00-8aecc7dfaa64"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TogglePreviousTank"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""423637f1-207f-4f4e-a8fb-83c1d415094b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aiminig"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mobile"",
            ""bindingGroup"": ""Mobile"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Tank
            m_Tank = asset.FindActionMap("Tank", throwIfNotFound: true);
            m_Tank_Move = m_Tank.FindAction("Move", throwIfNotFound: true);
            m_Tank_Attack = m_Tank.FindAction("Attack", throwIfNotFound: true);
            m_Tank_ToggleNextTank = m_Tank.FindAction("ToggleNextTank", throwIfNotFound: true);
            m_Tank_TogglePreviousTank = m_Tank.FindAction("TogglePreviousTank", throwIfNotFound: true);
            m_Tank_Aiminig = m_Tank.FindAction("Aiminig", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Tank
        private readonly InputActionMap m_Tank;
        private ITankActions m_TankActionsCallbackInterface;
        private readonly InputAction m_Tank_Move;
        private readonly InputAction m_Tank_Attack;
        private readonly InputAction m_Tank_ToggleNextTank;
        private readonly InputAction m_Tank_TogglePreviousTank;
        private readonly InputAction m_Tank_Aiminig;
        public struct TankActions
        {
            private @InputControls m_Wrapper;
            public TankActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Tank_Move;
            public InputAction @Attack => m_Wrapper.m_Tank_Attack;
            public InputAction @ToggleNextTank => m_Wrapper.m_Tank_ToggleNextTank;
            public InputAction @TogglePreviousTank => m_Wrapper.m_Tank_TogglePreviousTank;
            public InputAction @Aiminig => m_Wrapper.m_Tank_Aiminig;
            public InputActionMap Get() { return m_Wrapper.m_Tank; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TankActions set) { return set.Get(); }
            public void SetCallbacks(ITankActions instance)
            {
                if (m_Wrapper.m_TankActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_TankActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnMove;
                    @Attack.started -= m_Wrapper.m_TankActionsCallbackInterface.OnAttack;
                    @Attack.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnAttack;
                    @Attack.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnAttack;
                    @ToggleNextTank.started -= m_Wrapper.m_TankActionsCallbackInterface.OnToggleNextTank;
                    @ToggleNextTank.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnToggleNextTank;
                    @ToggleNextTank.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnToggleNextTank;
                    @TogglePreviousTank.started -= m_Wrapper.m_TankActionsCallbackInterface.OnTogglePreviousTank;
                    @TogglePreviousTank.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnTogglePreviousTank;
                    @TogglePreviousTank.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnTogglePreviousTank;
                    @Aiminig.started -= m_Wrapper.m_TankActionsCallbackInterface.OnAiminig;
                    @Aiminig.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnAiminig;
                    @Aiminig.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnAiminig;
                }
                m_Wrapper.m_TankActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Attack.started += instance.OnAttack;
                    @Attack.performed += instance.OnAttack;
                    @Attack.canceled += instance.OnAttack;
                    @ToggleNextTank.started += instance.OnToggleNextTank;
                    @ToggleNextTank.performed += instance.OnToggleNextTank;
                    @ToggleNextTank.canceled += instance.OnToggleNextTank;
                    @TogglePreviousTank.started += instance.OnTogglePreviousTank;
                    @TogglePreviousTank.performed += instance.OnTogglePreviousTank;
                    @TogglePreviousTank.canceled += instance.OnTogglePreviousTank;
                    @Aiminig.started += instance.OnAiminig;
                    @Aiminig.performed += instance.OnAiminig;
                    @Aiminig.canceled += instance.OnAiminig;
                }
            }
        }
        public TankActions @Tank => new TankActions(this);
        private int m_PCSchemeIndex = -1;
        public InputControlScheme PCScheme
        {
            get
            {
                if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
                return asset.controlSchemes[m_PCSchemeIndex];
            }
        }
        private int m_MobileSchemeIndex = -1;
        public InputControlScheme MobileScheme
        {
            get
            {
                if (m_MobileSchemeIndex == -1) m_MobileSchemeIndex = asset.FindControlSchemeIndex("Mobile");
                return asset.controlSchemes[m_MobileSchemeIndex];
            }
        }
        public interface ITankActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnAttack(InputAction.CallbackContext context);
            void OnToggleNextTank(InputAction.CallbackContext context);
            void OnTogglePreviousTank(InputAction.CallbackContext context);
            void OnAiminig(InputAction.CallbackContext context);
        }
    }
}
